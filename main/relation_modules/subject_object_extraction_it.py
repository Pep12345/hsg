from nltk.stem.wordnet import WordNetLemmatizer
import spacy_stanza
# This script is modified to italian lang by the script generated by Schrading for eng lang:
# https://github.com/NSchrading/intro-spacy-nlp/blob/master/subject_object_extraction.py

SUBJECTS = ["nsubj", "nsubj:pass", "csubj"]
OBJECTS = ["obj", "obl:agent"]


# The next 3 function check for s-v-o added by conjunction
# TODO: add condition for comma (,) that is normally used with 3 or more
def getSubsFromConjunctions(subs):
    moreSubs = []
    for sub in subs:
        # rights is a generator
        rights = list(sub.rights)
        # this part is different because in italian dep tree conjunction is different
        # the subj is connected by conj to an other noun and the noun has 'e' in his left
        for tok in rights:
            if tok.dep_ == 'conj' and 'e' in {t.lower_ for t in tok.lefts}:
                moreSubs.extend([tok for tok in rights if tok.dep_ in SUBJECTS or tok.pos_ == "NOUN"])
            if len(moreSubs) > 0:
                moreSubs.extend(getSubsFromConjunctions(moreSubs))
    return moreSubs


def getObjsFromConjunctions(objs):
    moreObjs = []
    for obj in objs:
        # rights is a generator
        rights = list(obj.rights)
        # this part is different because in italian dep tree conjunction is different
        # see getsubsfromconjunctions for details
        for tok in rights:
            if tok.dep_ == 'conj' and 'e' in {t.lower_ for t in tok.lefts}:
                moreObjs.extend([tok for tok in rights if tok.dep_ in OBJECTS or tok.pos_ == "NOUN"])
            if len(moreObjs) > 0:
                moreObjs.extend(getObjsFromConjunctions(moreObjs))
    return moreObjs

def getVerbsFromConjunctions(verbs):
    moreVerbs = []
    for verb in verbs:
        rights = verb.rights
        # this part is different because in italian dep tree conjunction is different
        # see getsubsfromconjunctions for details
        for tok in rights:
            if tok.dep_ == 'conj' and 'e' in {t.lower_ for t in tok.lefts}:
                moreVerbs.extend([tok for tok in verb.rights if tok.pos_ == "VERB"])
            if len(moreVerbs) > 0:
                moreVerbs.extend(getVerbsFromConjunctions(moreVerbs))
    return moreVerbs


def findSubs(tok):
    head = tok.head
    while head.pos_ != "VERB" and head.pos_ != "NOUN" and head.head != head:
        head = head.head
    if head.pos_ == "VERB":
        subs = [tok for tok in head.lefts if tok.dep_ == "SUB"]
        if len(subs) > 0:
            verbNegated = isNegated(head)
            subs.extend(getSubsFromConjunctions(subs))
            return subs, verbNegated
        elif head.head != head:
            return findSubs(head)
    elif head.pos_ == "NOUN":
        return [head], isNegated(tok)
    return [], False

def isNegated(tok):
    negations = {"non", "mai", "nessuno"}
    for dep in list(tok.lefts) + list(tok.rights):
        if dep.lower_ in negations:
            return True
    return False

def findSVs(tokens):
    svs = []
    verbs = [tok for tok in tokens if tok.pos_ == "VERB"]
    for v in verbs:
        subs, verbNegated = getAllSubs(v)
        if len(subs) > 0:
            for sub in subs:
                svs.append((sub.orth_, "!" + v.orth_ if verbNegated else v.orth_))
    return svs


# derived by english version, never used
# TODO: found example for this part o.o
def getObjsFromPrepositions(deps):
    objs = []
    for dep in deps:
        if dep.pos_ == "ADP" and dep.dep_ == "prep":
            print("#############\n\n\n\n\n\n##########################################")
            objs.extend([tok for tok in dep.rights if tok.dep_ in OBJECTS or (tok.pos_ == "PRON" and tok.lower_ in ["me","mi"])])
    return objs

# used for sentence like "leonardo was a painter" painter is not an object but an attr
# TODO: convert to italian where dep is used differently
def getObjsFromAttrs(deps):
    for dep in deps:
        if dep.pos_ == "NOUN" and dep.dep_ == "attr":
            verbs = [tok for tok in dep.rights if tok.pos_ == "VERB"]
            if len(verbs) > 0:
                for v in verbs:
                    rights = list(v.rights)
                    objs = [tok for tok in rights if tok.dep_ in OBJECTS]
                    objs.extend(getObjsFromPrepositions(rights))
                    if len(objs) > 0:
                        print("#############\n\n\n\n\n\n##########################################")
                        return v.lemma_, objs
    return None, None


# used for sentence like: you like to swim, swim is not an object but an xcomp
# in italian is the same: lorenzo adora nuotare, nuotare is xcomp connected to adora
def getObjFromXComp(deps):
    for dep in deps:
        if dep.pos_ == "VERB" and dep.dep_ == "xcomp":
            v = dep
            rights = list(v.rights)
            objs = [tok for tok in rights if tok.dep_ in OBJECTS]
            objs.extend(getObjsFromPrepositions(rights))
            if len(objs) > 0:
                return v, objs
    return None, None

def getAllSubs(v):
    verbNegated = isNegated(v)
    subs = [tok for tok in v.lefts if tok.dep_ in SUBJECTS and tok.pos_ != "DET"]
    if len(subs) > 0:
        subs.extend(getSubsFromConjunctions(subs))
    else:
        foundSubs, verbNegated = findSubs(v)
        subs.extend(foundSubs)
    return subs, verbNegated

def getAllObjs(v):
    # rights is a generator
    rights = list(v.rights)
    objs = [tok for tok in rights if tok.dep_ in OBJECTS]
    objs.extend(getObjsFromPrepositions(rights))

    potentialNewVerb, potentialNewObjs = getObjFromXComp(rights)
    if potentialNewVerb is not None and potentialNewObjs is not None and len(potentialNewObjs) > 0:
        objs.extend(potentialNewObjs)
        v = potentialNewVerb
    if len(objs) > 0:
        objs.extend(getObjsFromConjunctions(objs))
    return v, objs

def findSVOs(tokens):
    svos = []
    verbs = [tok for tok in tokens if tok.pos_ == "VERB" and tok.dep_ != "aux"]
    for v in verbs:
        subs, verbNegated = getAllSubs(v)
        # hopefully there are subs, if not, don't examine this verb any longer
        if len(subs) > 0:
            v, objs = getAllObjs(v)
            for sub in subs:
                for obj in objs:
                    objNegated = isNegated(obj)
                    #svos.append((sub.lower_, "!" + v.lower_ if verbNegated or objNegated else v.lower_, obj.lower_))
                    svos.append((sub, "!" + v.lower_ if verbNegated or objNegated else v.text, obj))
    return svos

def printDeps(toks):
    for tok in toks:
        print(tok.orth_, tok.dep_, tok.pos_, tok.head.orth_, [t.orth_ for t in tok.lefts], [t.orth_ for t in tok.rights])


def testSVOs():
    #nlp = spacy.load("it_core_news_lg")
    nlp = spacy_stanza.load_pipeline(name='it', processor="tokenize,mwt,pos,lemma,depparse")





    print("-----------------------------------------------")
    tok = nlp("La riunione è stata chiesta dagli stessi commissari")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    assert set(svos) == {('riunione', 'chiesta', 'commissari')}

    print("-----------------------------------------------")
    tok = nlp("la Gioconda che è un'opera è stata dipinta da Leonardo")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    assert set(svos) == {('gioconda', 'dipinta', 'leonardo')}

    print("-----------------------------------------------")
    tok = nlp("Luca ha ricevuto un regalo da Sara")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    assert set(svos) == {('luca', 'ricevuto', 'regalo')}

    print("-----------------------------------------------")
    tok = nlp("io non ho altre assistenze")
    svos = findSVOs(tok)
    printDeps(tok)
    assert set(svos) == {('io', '!ho', 'assistenze')}

    print("-----------------------------------------------")
    tok = nlp("Loro mangiano la pizza con l'ananas.")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    assert set(svos) == {('loro', 'mangiano', 'pizza')}

    print("--------------------------------------------------")
    tok = nlp("io non ho altre assistenze finanziarie avviabili e lui certamente non fornisce supporto.")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    assert set(svos) == {('io', '!ho', 'assistenze'), ('lui', '!fornisce', 'supporto')}

    print("--------------------------------------------------")
    tok = nlp("io non ho altre assistenze finanziarie avviabili, e lui certamente non fornisce supporto.")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    assert set(svos) == {('io', '!ho', 'assistenze'), ('lui', '!fornisce', 'supporto')}

    print("--------------------------------------------------")
    ''' test fallisce con spacy, riesce con stanza_spacy '''
    tok = nlp("lui e suo fratello hanno cucinato una torta e una pizza")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    assert set(svos) == {('lui', 'cucinato', 'pizza'), ('lui', 'cucinato', 'torta'),
                         ('fratello', 'cucinato', 'pizza'), ('fratello', 'cucinato', 'torta')}

    print("--------------------------------------------------")

'''
    print("--------------------------------------------------")
    tok = nlp("he told me i would die alone with nothing but my career someday")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    assert set(svos) == {('he', 'told', 'me')}

    print("--------------------------------------------------")
    tok = nlp("I wanted to kill him with a hammer.")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    assert set(svos) == {('i', 'kill', 'him')}

    print("--------------------------------------------------")
    tok = nlp("because he hit me and also made me so angry i wanted to kill him with a hammer.")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    assert set(svos) == {('he', 'hit', 'me'), ('i', 'kill', 'him')}

    print("--------------------------------------------------")
    tok = nlp("he and his brother shot me")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    assert set(svos) == {('he', 'shot', 'me'), ('brother', 'shot', 'me')}

    tok = nlp("the annoying person that was my boyfriend hit me")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    assert set(svos) == {('person', 'was', 'boyfriend'), ('person', 'hit', 'me')}

    print("--------------------------------------------------")
    tok = nlp("the boy raced the girl who had a hat that had spots.")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    assert set(svos) == {('boy', 'raced', 'girl'), ('who', 'had', 'hat'), ('hat', 'had', 'spots')}

    print("--------------------------------------------------")
    tok = nlp("he spit on me")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    assert set(svos) == {('he', 'spit', 'me')}

    print("--------------------------------------------------")
    tok = nlp("he didn't spit on me")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    assert set(svos) == {('he', '!spit', 'me')}

    print("--------------------------------------------------")
    tok = nlp("the boy raced the girl who had a hat that didn't have spots.")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    assert set(svos) == {('boy', 'raced', 'girl'), ('who', 'had', 'hat'), ('hat', '!have', 'spots')}

    print("--------------------------------------------------")
    tok = nlp("he is a nice man that didn't hurt my child and sister")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    assert set(svos) == {('he', 'is', 'man'), ('man', '!hurt', 'child'), ('man', '!hurt', 'sister')}

    print("--------------------------------------------------")
    tok = nlp("he didn't spit on me and my child")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    assert set(svos) == {('he', '!spit', 'me'), ('he', '!spit', 'child')}

    print("--------------------------------------------------")
    tok = nlp("he beat and hurt me")
    svos = findSVOs(tok)
    printDeps(tok)
    print(svos)
    # tok = nlp("he beat and hurt me")
    '''


def main():
    testSVOs()

if __name__ == "__main__":
    main()